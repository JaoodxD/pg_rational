create extension pg_rational;
-- input
-- can parse a simple fraction
select '1/3'::rational;
 rational 
----------
 1/3
(1 row)

-- can parse negatives
select '-1/3'::rational;
 rational 
----------
 -1/3
(1 row)

select '1/-3'::rational;
 rational 
----------
 -1/3
(1 row)

-- SEND works
select rational_send('1/3');
           rational_send            
------------------------------------
 \x00000000000000010000000000000003
(1 row)

-- too big
select '9223372036854775808/9223372036854775807'::rational;
ERROR:  numerator or denominator outside valid int64 value: "9223372036854775808/9223372036854775807"
LINE 1: select '9223372036854775808/9223372036854775807'::rational;
               ^
-- no spaces
select '1 /3'::rational;
ERROR:  invalid input syntax for fraction: "1 /3"
LINE 1: select '1 /3'::rational;
               ^
-- no zero denominator
select '1/0'::rational;
ERROR:  fraction cannot have zero denominator: "1/0"
LINE 1: select '1/0'::rational;
               ^
-- no single numbers
select '1'::rational;
ERROR:  invalid input syntax for fraction: "1"
LINE 1: select '1'::rational;
               ^
-- no garbage
select ''::rational;
ERROR:  invalid input syntax for fraction: ""
LINE 1: select ''::rational;
               ^
select 'sdfkjsdfj34984538'::rational;
ERROR:  invalid input syntax for fraction: "sdfkjsdfj34984538"
LINE 1: select 'sdfkjsdfj34984538'::rational;
               ^
-- simplification
-- double negative becomes positive
select rational_simplify('-1/-3');
 rational_simplify 
-------------------
 1/3
(1 row)

-- works with negative value
select rational_simplify('-3/12');
 rational_simplify 
-------------------
 -1/4
(1 row)

-- don't move negative if it would overflow
select rational_simplify('1/-9223372036854775808');
   rational_simplify    
------------------------
 1/-9223372036854775808
(1 row)

-- biggest value reduces
select rational_simplify('9223372036854775807/9223372036854775807');
 rational_simplify 
-------------------
 1/1
(1 row)

-- smallest value reduces
select rational_simplify('-9223372036854775808/-9223372036854775808');
 rational_simplify 
-------------------
 1/1
(1 row)

-- idempotent on simplified expression
select rational_simplify('1/1');
 rational_simplify 
-------------------
 1/1
(1 row)

-- addition
-- additive identity
select '0/1'::rational + '1/2';
 ?column? 
----------
 1/2
(1 row)

-- additive inverse
select '1/2'::rational + '-1/2';
 ?column? 
----------
 0/4
(1 row)

-- just regular
select '1/2'::rational + '1/2';
 ?column? 
----------
 4/4
(1 row)

-- forcing intermediate simplification
select '9223372036854775807/9223372036854775807'::rational + '1/1';
 ?column? 
----------
 2/1
(1 row)

-- overflow (sqrt(max)+1)/1 + 1/sqrt(max)
select '3037000501/1'::rational + '1/3037000500';
ERROR:  intermediate value overflow in rational addition
-- multiplication
-- multiplicative identity
select '1/1'::rational * '1/2';
 ?column? 
----------
 1/2
(1 row)

-- multiplicative inverse
select '2/1'::rational * '1/2';
 ?column? 
----------
 2/2
(1 row)

-- just regular
select '5/8'::rational * '3/5';
 ?column? 
----------
 15/40
(1 row)

-- forcing intermediate simplification
select '9223372036854775807/9223372036854775807'::rational * '2/2';
 ?column? 
----------
 2/2
(1 row)

-- overflow
select '3037000501/3037000500'::rational * '3037000501/3037000500';
ERROR:  intermediate value overflow in rational multiplication
-- comparison
-- equal in every way
select '1/1'::rational = '1/1';
 ?column? 
----------
 t
(1 row)

-- same equivalence class
select '20/40'::rational = '22/44';
 ?column? 
----------
 t
(1 row)

-- negatives work too
select '-20/40'::rational = '-22/44';
 ?column? 
----------
 t
(1 row)

-- forcing intermediate simplification
select '3037000501/3037000501'::rational = '3037000501/3037000501';
 ?column? 
----------
 t
(1 row)

-- overflow
select '3037000501/3037000500'::rational = '3037000501/3037000500';
ERROR:  intermediate value overflow in rational comparison
-- not everything is equal
select '2/3'::rational = '8/5';
 ?column? 
----------
 f
(1 row)

-- negates equality
select '1/1'::rational <> '1/1';
 ?column? 
----------
 f
(1 row)

-- forcing intermediate simplification
select '3037000501/3037000501'::rational <> '3037000501/3037000501';
 ?column? 
----------
 f
(1 row)

-- overflow
select '3037000501/3037000500'::rational <> '3037000501/3037000500';
ERROR:  intermediate value overflow in rational comparison
-- not equal
select '2/3'::rational <> '8/5';
 ?column? 
----------
 t
(1 row)

-- less than
select r
  from unnest(ARRAY[
      '3037000501/3037000501',
      '0/9999999',
      '-11/17',
      '3/4',
      '-1/2',
      '5/8',
      '6/9'
    ]::rational[]) as r
order by r asc;
           r           
-----------------------
 -11/17
 -1/2
 0/9999999
 5/8
 6/9
 3/4
 3037000501/3037000501
(7 rows)

